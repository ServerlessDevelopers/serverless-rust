"use strict";(self.webpackChunkinteractive_docs=self.webpackChunkinteractive_docs||[]).push([[1757],{8132:(e,o,t)=>{t.r(o),t.d(o,{CH:()=>D,assets:()=>d,chCodeConfig:()=>h,contentTitle:()=>a,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>u});t(6540);var n=t(4848),s=t(8453),r=t(4754),c=t(3554),l=t.n(c);const p={sidebar_position:2,title:"EventBridge Event Handler",description:"Lambda function for handling an event from Amazon EventBridge",keywords:["rust","lambda","eventbridge","messaging","putevent"]},a=void 0,i={id:"patterns/messaging-patterns/eventbridge-event-handler",title:"EventBridge Event Handler",description:"Lambda function for handling an event from Amazon EventBridge",source:"@site/docs/patterns/messaging-patterns/eventbridge-event-handler.mdx",sourceDirName:"patterns/messaging-patterns",slug:"/patterns/messaging-patterns/eventbridge-event-handler",permalink:"/docs/patterns/messaging-patterns/eventbridge-event-handler",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"EventBridge Event Handler",description:"Lambda function for handling an event from Amazon EventBridge",keywords:["rust","lambda","eventbridge","messaging","putevent"]},sidebar:"tutorialSidebar",previous:{title:"EventBridge PutEvent",permalink:"/docs/patterns/messaging-patterns/eventbridge-putevent"},next:{title:"SQS Message Processor",permalink:"/docs/patterns/messaging-patterns/sam-lambda-sqs-message-processor"}},d={},D={annotations:r.hk,Code:r.Cy,Section:r.wn,SectionLink:r.W_,SectionCode:r.bx},h={staticMediaQuery:"not screen, (max-width: 768px)",lineNumbers:void 0,showCopyButton:void 0,themeName:"dark-plus"},u=[{value:"Video Walkthrough",id:"video-walkthrough",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Lambda Code",id:"lambda-code",level:2},{value:"Main",id:"main",level:3},{value:"Handler Code",id:"handler-code",level:3},{value:"Deploy",id:"deploy",level:2},{value:"Congrats",id:"congrats",level:2}];function y(e){const o=Object.assign({p:"p",blockquote:"blockquote",a:"a",h2:"h2",h3:"h3",code:"code"},(0,s.R)(),e.components);return D||g("CH",!1),D.Code||g("CH.Code",!0),D.Section||g("CH.Section",!0),D.SectionCode||g("CH.SectionCode",!0),D.SectionLink||g("CH.SectionLink",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("style",{dangerouslySetInnerHTML:{__html:'[data-ch-theme="dark-plus"] {  --ch-t-colorScheme: dark;--ch-t-foreground: #D4D4D4;--ch-t-background: #1E1E1E;--ch-t-lighter-inlineBackground: #1e1e1ee6;--ch-t-editor-background: #1E1E1E;--ch-t-editor-foreground: #D4D4D4;--ch-t-editor-rangeHighlightBackground: #ffffff0b;--ch-t-editor-infoForeground: #3794FF;--ch-t-editor-selectionBackground: #264F78;--ch-t-focusBorder: #007FD4;--ch-t-tab-activeBackground: #1E1E1E;--ch-t-tab-activeForeground: #ffffff;--ch-t-tab-inactiveBackground: #2D2D2D;--ch-t-tab-inactiveForeground: #ffffff80;--ch-t-tab-border: #252526;--ch-t-tab-activeBorder: #1E1E1E;--ch-t-editorGroup-border: #444444;--ch-t-editorGroupHeader-tabsBackground: #252526;--ch-t-editorLineNumber-foreground: #858585;--ch-t-input-background: #3C3C3C;--ch-t-input-foreground: #D4D4D4;--ch-t-icon-foreground: #C5C5C5;--ch-t-sideBar-background: #252526;--ch-t-sideBar-foreground: #D4D4D4;--ch-t-sideBar-border: #252526;--ch-t-list-activeSelectionBackground: #094771;--ch-t-list-activeSelectionForeground: #fffffe;--ch-t-list-hoverBackground: #2A2D2E; }'}}),"\n","\n","\n",(0,n.jsx)(o.p,{children:"As mentioned in several of the other messaging quick starts, the publisher/subscriber (pub/sub) pattern is extremely common in a serverless architecture. Severless encourages micro and someties even nano-sized components that are assembled together by way of contracts as opposed to building everything into a single binary."}),"\n",(0,n.jsx)(o.p,{children:"AWS' EventBridge is a service that describes itself like this:"}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"Amazon EventBridge Event Bus is a serverless event bus that helps you receive, filter, transform, route, and deliver events. - AWS"}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["It provides a Default Bus or you are able to add Custom Event Buses to fit your need.  This article will look to showcase how to create a Lambda function that handles an event from an EventBridge custom bus. It also takes the publishing component from the article on ",(0,n.jsx)(o.a,{href:"/docs/patterns/messaging-patterns/eventbridge-putevent",children:"Event Bridge Put Events"})," to give a cohesive pub/sub experience."]}),"\n",(0,n.jsx)(o.h2,{id:"video-walkthrough",children:"Video Walkthrough"}),"\n",(0,n.jsx)(o.p,{children:"If video is more your thing, then check out this walkthrough on YouTube. Otherwise, keep reading for the written documentation."}),"\n",(0,n.jsx)(l(),{controls:!0,url:"https://youtu.be/DUm2rHbiFTs"}),"\n",(0,n.jsx)(o.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,n.jsx)(o.p,{children:"The sample in this tutorial builds upon a Lambda that listens on a Function URL and then generates an EventBridge PutEvent with a custom domain model. A Rule is defined by the subscriber on the custom event bus that sends any matching messages to a Lambda function. The subscriber Lambda function will deserialize and process the message."}),"\n",(0,n.jsxs)(o.p,{children:["The EventBridge -> Lambda integration is an example of an ",(0,n.jsx)(o.a,{href:"/docs/fundamentals/invocation-modes#asynchronous-invokes",children:"async invoke"}),". Internally inside the Lambda service the events are queued up onto an SQS queue managed by Lambda, and your function is invoked from here."]}),"\n",(0,n.jsx)(o.p,{children:"An important note, the sample application deploys the publisher, subscriber and event bus using the same infrastructure as code template. This is for ease of demonstration. Typically the 3 components would be deployed as 3 independent stacks."}),"\n",(0,n.jsx)(o.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,n.jsxs)(o.p,{children:["A Lambda and EventBridge Event handler template is found under the ",(0,n.jsx)(o.a,{href:"https://github.com/serverlessdevelopers/serverless-rust/tree/main/templates/patterns/messaging-patterns/eventbridge-handler",children:"./templates"})," directory in the GitHub repo. You can use template to get started building with EventBridge and Lambda."]}),"\n",(0,n.jsx)(o.p,{children:"The template is simple, and is based upon the following structure."}),"\n",(0,n.jsx)(D.Code,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"lambdas",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"  - ",props:{style:{color:"#D4D4D4"}}},{content:"event-handler",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"  - ",props:{style:{color:"#D4D4D4"}}},{content:"publisher",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"  - ",props:{style:{color:"#D4D4D4"}}},{content:"shared",props:{style:{color:"#CE9178"}}}]}],lang:"bash"},annotations:[]}]}),"\n",(0,n.jsx)(o.h2,{id:"lambda-code",children:"Lambda Code"}),"\n",(0,n.jsx)(o.h3,{id:"main",children:"Main"}),"\n",(0,n.jsxs)(D.Section,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"#[tokio::main]",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"async fn ",props:{style:{color:"#569CD6"}}},{content:"main",props:{style:{color:"#DCDCAA"}}},{content:"() -> ",props:{style:{color:"#D4D4D4"}}},{content:"Result",props:{style:{color:"#4EC9B0"}}},{content:"<(), ",props:{style:{color:"#D4D4D4"}}},{content:"Error",props:{style:{color:"#4EC9B0"}}},{content:"> {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    tracing_subscriber",props:{style:{color:"#4EC9B0"}}},{content:"::",props:{style:{color:"#D4D4D4"}}},{content:"fmt",props:{style:{color:"#DCDCAA"}}},{content:"()",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        .",props:{style:{color:"#D4D4D4"}}},{content:"with_max_level",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"tracing",props:{style:{color:"#4EC9B0"}}},{content:"::",props:{style:{color:"#D4D4D4"}}},{content:"Level",props:{style:{color:"#4EC9B0"}}},{content:"::INFO)",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        .",props:{style:{color:"#D4D4D4"}}},{content:"with_target",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"false",props:{style:{color:"#569CD6"}}},{content:")",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        .",props:{style:{color:"#D4D4D4"}}},{content:"without_time",props:{style:{color:"#DCDCAA"}}},{content:"()",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        .",props:{style:{color:"#D4D4D4"}}},{content:"init",props:{style:{color:"#DCDCAA"}}},{content:"();",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    run",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"service_fn",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"function_handler",props:{style:{color:"#9CDCFE"}}},{content:")).",props:{style:{color:"#D4D4D4"}}},{content:"await",props:{style:{color:"#C586C0"}}}]},{tokens:[{content:"}",props:{style:{color:"#D4D4D4"}}}]}],lang:"rust"},annotations:[]}],children:[(0,n.jsxs)(o.p,{children:["When handling messages from EventBridge with Lambda your Lambda code will look much like the other services covered as part of the ",(0,n.jsx)(o.a,{href:"../messaging-patterns/",children:"messaging patterns"}),". The main function sets up the logging framework, and then starts the Lambda runtime. Passing in the ",(0,n.jsx)(D.SectionLink,{focus:"9",id:"focus://9",children:"function to use as the handler"}),"."]}),(0,n.jsx)(D.SectionCode,{})]}),"\n",(0,n.jsx)(o.h3,{id:"handler-code",children:"Handler Code"}),"\n",(0,n.jsxs)(D.Section,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"async fn ",props:{style:{color:"#569CD6"}}},{content:"function_handler",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"event",props:{style:{color:"#9CDCFE"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"LambdaEvent",props:{style:{color:"#4EC9B0"}}},{content:"<",props:{style:{color:"#D4D4D4"}}},{content:"CloudWatchEvent",props:{style:{color:"#4EC9B0"}}},{content:">) -> ",props:{style:{color:"#D4D4D4"}}},{content:"Result",props:{style:{color:"#4EC9B0"}}},{content:"<(), ",props:{style:{color:"#D4D4D4"}}},{content:"Error",props:{style:{color:"#4EC9B0"}}},{content:"> {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    let ",props:{style:{color:"#569CD6"}}},{content:"payload",props:{style:{color:"#9CDCFE"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"Result",props:{style:{color:"#4EC9B0"}}},{content:"<",props:{style:{color:"#D4D4D4"}}},{content:"Payload",props:{style:{color:"#4EC9B0"}}},{content:", ",props:{style:{color:"#D4D4D4"}}},{content:"MessageParseError",props:{style:{color:"#4EC9B0"}}},{content:"> = ",props:{style:{color:"#D4D4D4"}}},{content:"InternalMessage",props:{style:{color:"#DCDCAA"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"event",props:{style:{color:"#9CDCFE"}}},{content:".payload)",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        .",props:{style:{color:"#D4D4D4"}}},{content:"try_into",props:{style:{color:"#DCDCAA"}}},{content:"();",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    match ",props:{style:{color:"#C586C0"}}},{content:"payload",props:{style:{color:"#9CDCFE"}}},{content:" {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        Ok",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"payload",props:{style:{color:"#9CDCFE"}}},{content:") => {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            let ",props:{style:{color:"#569CD6"}}},{content:"_handle_res",props:{style:{color:"#9CDCFE"}}},{content:" = ",props:{style:{color:"#D4D4D4"}}},{content:"PayloadHandler",props:{style:{color:"#4EC9B0"}}},{content:"::",props:{style:{color:"#D4D4D4"}}},{content:"handle",props:{style:{color:"#DCDCAA"}}},{content:"(&",props:{style:{color:"#D4D4D4"}}},{content:"payload",props:{style:{color:"#9CDCFE"}}},{content:").",props:{style:{color:"#D4D4D4"}}},{content:"await",props:{style:{color:"#C586C0"}}},{content:";",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            match ",props:{style:{color:"#C586C0"}}},{content:"_handle_res",props:{style:{color:"#9CDCFE"}}},{content:" {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"                Ok",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"_",props:{style:{color:"#9CDCFE"}}},{content:") => ",props:{style:{color:"#D4D4D4"}}},{content:"Ok",props:{style:{color:"#4EC9B0"}}},{content:"(()),",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"                Err",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"e",props:{style:{color:"#9CDCFE"}}},{content:") => ",props:{style:{color:"#D4D4D4"}}},{content:"Err",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"e",props:{style:{color:"#9CDCFE"}}},{content:".",props:{style:{color:"#D4D4D4"}}},{content:"into",props:{style:{color:"#DCDCAA"}}},{content:"())",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            }",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        }",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        Err",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"err",props:{style:{color:"#9CDCFE"}}},{content:") => {",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            Err",props:{style:{color:"#4EC9B0"}}},{content:"(",props:{style:{color:"#D4D4D4"}}},{content:"err",props:{style:{color:"#9CDCFE"}}},{content:".",props:{style:{color:"#D4D4D4"}}},{content:"into",props:{style:{color:"#DCDCAA"}}},{content:"())",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        }",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    }",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"}",props:{style:{color:"#D4D4D4"}}}]}],lang:"rust"},annotations:[]}],children:[(0,n.jsxs)(o.p,{children:["The handler code in this sample is deserializing the ",(0,n.jsx)(o.code,{children:"detail"})," of the event that comes from EventBridge and using a handler from your custom business logic to actually process the message."]}),(0,n.jsxs)(o.p,{children:["The ",(0,n.jsxs)(D.SectionLink,{focus:"1[26:63]",id:"focus://1[26:63]",children:[(0,n.jsx)(o.code,{children:"LambdaEvent"})," that comes into your handler function is of type ",(0,n.jsx)(o.code,{children:"CloudWatchEvent"})]}),". Before EventBridge became it's own service, it was called CloudWatch events. Hence the name of the struct being ",(0,n.jsx)(o.code,{children:"CloudWatchEvent"}),"."]}),(0,n.jsxs)(o.p,{children:["For re-usability, a custom ",(0,n.jsx)(D.SectionLink,{focus:"2",id:"focus://2",children:(0,n.jsx)(o.code,{children:"InternalMessage"})})," struct is used as a wrapper around the ",(0,n.jsx)(o.code,{children:"CloudWatchEvent"})," type that comes from the ",(0,n.jsx)(o.a,{href:"https://docs.rs/aws_lambda_events/latest/aws_lambda_events/",children:"Lambda events Crate"}),". This allows the ",(0,n.jsx)(D.SectionLink,{focus:"3",id:"focus://3",children:(0,n.jsx)(o.code,{children:"try_into()"})})," function to be used to handle the conversion from the custom CloudWatchEvent type into the ",(0,n.jsx)(o.code,{children:"Payload"})," type used by the application."]}),(0,n.jsxs)(o.p,{children:["Note that if the ",(0,n.jsxs)(D.SectionLink,{focus:"14:16",id:"focus://14:16",children:[(0,n.jsx)(o.code,{children:"try_into()"})," call fails"]})," or the ",(0,n.jsxs)(D.SectionLink,{focus:"11",id:"focus://11",children:[(0,n.jsx)(o.code,{children:"handle()"})," function call fails"]})," the handler returns an error. This will return an error back to the Lambda runtime."]}),(0,n.jsx)(D.SectionCode,{})]}),"\n",(0,n.jsxs)(D.Section,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"  EventHandlerFunction",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"    Type",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"AWS::Serverless::Function ",props:{style:{color:"#CE9178"}}},{content:"# More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction",props:{style:{color:"#6A9955"}}}]},{tokens:[{content:"    Metadata",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"      BuildMethod",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"rust-cargolambda",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      BuildProperties",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        Binary",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"event-bridge-handler",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"    Properties",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"      FunctionName",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"serverless-rust-EventHandler",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      CodeUri",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:".",props:{style:{color:"#B5CEA8"}}}]},{tokens:[{content:"      Handler",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"bootstrap",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      Runtime",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"provided.al2023",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      EventInvokeConfig",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        MaximumRetryAttempts",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"1",props:{style:{color:"#B5CEA8"}}}]},{tokens:[{content:"        DestinationConfig",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"          OnFailure",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            Type",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"SQS",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      Architectures",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        - ",props:{style:{color:"#D4D4D4"}}},{content:"arm64",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"      Events",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"        Trigger",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"          Type",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"CloudWatchEvent",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"          Properties",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"            EventBusName",props:{style:{color:"#569CD6"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:"!GetAtt ",props:{style:{color:"#569CD6"}}},{content:"RustDemoEventBus.Name",props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"            Pattern",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"              source",props:{style:{color:"#569CD6"}}},{content:":",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:"                - ",props:{style:{color:"#D4D4D4"}}},{content:"RustDemo",props:{style:{color:"#CE9178"}}}]}],lang:"yaml"},annotations:[]}],children:[(0,n.jsxs)(o.p,{children:["By default, EventBridge retries sending the event for 24 hours and up to 185 times with an exponential back off and jitter, or randomized delay. You can ",(0,n.jsx)(D.SectionLink,{focus:"12:16",id:"focus://12:16",children:"control this retry behavior"}),", and the routing to a dead letter queue, using your Lambda event source configuration. This example uses AWS SAM to automatically create an ",(0,n.jsx)(D.SectionLink,{focus:"14:16",id:"focus://14:16",children:"SQS queue"})," for failures, and route any failed messages to the ",(0,n.jsx)(D.SectionLink,{focus:"13",id:"focus://13",children:"DLQ after only one retry"}),"."]}),(0,n.jsx)(D.SectionCode,{})]}),"\n",(0,n.jsx)(o.h2,{id:"deploy",children:"Deploy"}),"\n",(0,n.jsxs)(o.p,{children:["You can deploy this example directly to your own AWS account using the ",(0,n.jsx)(o.a,{href:"https://github.com/serverlessdevelopers/serverless-rust/tree/main/templates/patterns/messaging-patterns/eventbridge-handler",children:"provided template"}),". Simply clone the repo, and then run the below CLI commands from the repo root."]}),"\n",(0,n.jsx)(D.Code,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"cd templates/patterns/messaging-patterns/eventbridge-handler/",props:{}}]},{tokens:[{content:"sam build --beta-features",props:{}}]},{tokens:[{content:"sam deploy",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,n.jsx)(o.p,{children:"Once deployed, you can send a POST request to the Lambda function URL endpoint with the below body:"}),"\n",(0,n.jsx)(D.Code,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"{",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:'    "name"',props:{style:{color:"#9CDCFE"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:'"James"',props:{style:{color:"#CE9178"}}},{content:",",props:{style:{color:"#D4D4D4"}}}]},{tokens:[{content:'    "message"',props:{style:{color:"#9CDCFE"}}},{content:": ",props:{style:{color:"#D4D4D4"}}},{content:'"Hello YouTube"',props:{style:{color:"#CE9178"}}}]},{tokens:[{content:"}",props:{style:{color:"#D4D4D4"}}}]}],lang:"json"},annotations:[]}]}),"\n",(0,n.jsxs)(o.p,{children:["After running the POST request and getting back a 200 response, you can use the ",(0,n.jsx)(o.code,{children:"sam logs"})," CLI command to retrieve the logs for your EventBridge handler function."]}),"\n",(0,n.jsx)(D.Code,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"sam logs --profile sandbox --stack-name event-bridge-rust",props:{}}]}],lang:"text"},annotations:[]}]}),"\n",(0,n.jsx)(o.h2,{id:"congrats",children:"Congrats"}),"\n",(0,n.jsx)(o.p,{children:"And that's all there is to it.  This was a simple example but highlights how you can use Rust, Lambda and EventBridge to build high performance event driven systems."})]})}const m=function(e={}){const{wrapper:o}=Object.assign({},(0,s.R)(),e.components);return o?(0,n.jsx)(o,Object.assign({},e,{children:(0,n.jsx)(y,e)})):y(e)};function g(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);